# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-02-01 19:45
from __future__ import unicode_literals

import core.fields
import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50)),
                ('deposit', models.FloatField(default=0)),
                ('balance', models.FloatField(default=0)),
                ('taken', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='AccPayPhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(blank=True, null=True)),
                ('end', models.DateField(blank=True, null=True)),
                ('rate', models.FloatField(default=1)),
                ('comment', models.TextField(blank=True)),
                ('account', models.ManyToManyField(to='core.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('price', models.FloatField()),
                ('production_date', models.DateField(blank=True, null=True)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('date_of_expiry', models.DateField(blank=True, null=True)),
                ('exhaustion_date', models.DateField(blank=True, null=True)),
                ('stock', models.FloatField(default=0)),
                ('monthly_consumption', models.FloatField(default=0)),
                ('monthly_consumption_calcdate', models.DateField(blank=True, null=True)),
                ('consumption_evaluation', models.TextField(blank=True)),
                ('taken', models.FloatField(default=0)),
                ('parcel_approx', models.FloatField(default=0)),
                ('special_density', models.FloatField(default=0)),
                ('owner_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Account')),
            ],
        ),
        migrations.CreateModel(
            name='BatchStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_reserve', models.BooleanField(default=False)),
                ('amount_approx', models.FloatField(blank=True, null=True)),
                ('comment', models.TextField(blank=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Batch')),
            ],
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(default=0)),
                ('to_balance', models.BooleanField(default=True)),
                ('date', models.DateField()),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Account')),
            ],
        ),
        migrations.CreateModel(
            name='ConsumptionEstimation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('comment', models.TextField()),
                ('relevant', models.BooleanField(default=True)),
                ('entry_date', models.DateField(default=datetime.date.today)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('conversion_rate', models.FloatField(default=1)),
                ('full_name', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeneralOffer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variety', models.CharField(max_length=50)),
                ('distance_total', models.FloatField()),
                ('distance_add', models.FloatField()),
                ('orderpos', models.IntegerField()),
                ('comment', models.TextField()),
                ('supply_stock', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Insertion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_comment', models.TextField()),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('total_price', models.FloatField(blank=True, null=True)),
                ('discount', models.FloatField(blank=True, null=True)),
                ('basic_cost', models.FloatField(blank=True, null=True)),
                ('delivery_cost', models.FloatField(blank=True, null=True)),
                ('sum_of_lot_prices', models.FloatField(blank=True, null=True)),
                ('difference', models.FloatField(blank=True, null=True)),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('date_modified', models.DateField(auto_now=True)),
                ('compensation_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Account')),
                ('deliverer_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliverer_account', to='core.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Instalment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instalment_number', models.IntegerField()),
                ('rate', models.FloatField(default=1)),
                ('amount', models.FloatField(default=0)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Account')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('foodsave', core.fields.PercentField(blank=True, null=True)),
                ('cleanness', core.fields.PercentField(blank=True, null=True)),
                ('smelliness', core.fields.PercentField(blank=True, null=True)),
                ('reachability', core.fields.PercentField(blank=True, null=True)),
                ('resistance_smell', core.fields.PercentField(blank=True, null=True)),
                ('resistance_light', core.fields.PercentField(blank=True, null=True)),
                ('resistance_humidity', core.fields.PercentField(blank=True, null=True)),
                ('capability_oil', core.fields.PercentField(blank=True, null=True)),
                ('ventilation', core.fields.PercentField(blank=True, null=True)),
                ('rodentfree', models.NullBooleanField()),
                ('mothfree', models.NullBooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='MoneyBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('stock_value', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='MoneyBoxStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock', models.FloatField(default=0)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Currency')),
                ('money_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MoneyBox')),
            ],
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parcel', models.FloatField()),
                ('quantity', models.IntegerField()),
                ('favorite', models.BooleanField()),
                ('official', models.PositiveSmallIntegerField()),
                ('basic_price', models.FloatField(blank=True, null=True)),
                ('total_price', models.FloatField(blank=True, null=True)),
                ('discount', models.FloatField(blank=True, null=True)),
                ('available', models.BooleanField()),
                ('available_from', models.DateField()),
                ('available_until', models.DateField()),
                ('orderpos', models.IntegerField()),
                ('comment', models.TextField()),
                ('supply_stock', models.FloatField()),
                ('general_offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.GeneralOffer')),
            ],
        ),
        migrations.CreateModel(
            name='OfferRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('replace', models.BooleanField()),
                ('rating', core.fields.PercentField()),
                ('importance', core.fields.PercentField()),
                ('reason', models.TextField()),
                ('comment', models.TextField()),
                ('official', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ProductAvail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(blank=True, max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='QualityFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('conditions_0', models.TextField(blank=True)),
                ('conditions_100', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('importance', core.fields.PercentField(default=100)),
            ],
        ),
        migrations.CreateModel(
            name='QualityFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('feature', models.CharField(max_length=100)),
                ('a', models.FloatField(default=0)),
                ('b', models.FloatField(default=0)),
                ('c', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='StorageCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('streetname', models.CharField(blank=True, max_length=100)),
                ('streetnumber', models.SmallIntegerField(blank=True, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('town', models.CharField(blank=True, max_length=100)),
                ('address_notice', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='StorageSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('active_winter', models.BooleanField(default=True)),
                ('active_summer', models.BooleanField(default=True)),
                ('temperature_winter_min', models.FloatField(blank=True, null=True)),
                ('temperature_winter_max', models.FloatField(blank=True, null=True)),
                ('temperature_summer_min', models.FloatField(blank=True, null=True)),
                ('temperature_summer_max', models.FloatField(blank=True, null=True)),
                ('humidity_winter_min', core.fields.PercentField(blank=True, null=True)),
                ('humidity_winter_max', core.fields.PercentField(blank=True, null=True)),
                ('humidity_summer_min', core.fields.PercentField(blank=True, null=True)),
                ('humidity_summer_max', core.fields.PercentField(blank=True, null=True)),
                ('brightness_winter', core.fields.PercentField(blank=True, null=True)),
                ('brightness_summer', core.fields.PercentField(blank=True, null=True)),
                ('reachability_winter', core.fields.PercentField(blank=True, null=True)),
                ('reachability_summer', core.fields.PercentField(blank=True, null=True)),
                ('smelliness_winter', core.fields.PercentField(blank=True, null=True)),
                ('smelliness_summer', core.fields.PercentField(blank=True, null=True)),
                ('ventilation_winter', core.fields.PercentField(blank=True, null=True)),
                ('ventilation_summer', core.fields.PercentField(blank=True, null=True)),
                ('rodentfree', models.NullBooleanField()),
                ('mothfree', models.NullBooleanField()),
                ('height_level', models.FloatField(blank=True, null=True)),
                ('width', models.FloatField(blank=True, null=True)),
                ('depth', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('loadability', models.FloatField(blank=True, null=True)),
                ('conditions', models.ManyToManyField(blank=True, to='core.StorageCondition')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StorageLocation')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('full_names', models.TextField(blank=True)),
                ('is_wholesale', models.BooleanField(default=False)),
                ('is_retailer', models.BooleanField(default=False)),
                ('is_processor', models.BooleanField(default=False)),
                ('is_grower', models.BooleanField(default=False)),
                ('is_device_provider', models.BooleanField(default=False)),
                ('is_container_provider', models.BooleanField(default=False)),
                ('is_packaging_provider', models.BooleanField(default=False)),
                ('min_order_value', models.FloatField(blank=True, null=True)),
                ('min_order_weight', models.FloatField(blank=True, null=True)),
                ('max_order_weight', models.FloatField(blank=True, null=True)),
                ('basic_cost', models.FloatField(blank=True, null=True)),
                ('delivery_cost_gen', models.FloatField(blank=True, null=True)),
                ('delivery_cost_per_unit', models.FloatField(blank=True, null=True)),
                ('unit_for_delivery_cost', models.FloatField(blank=True, null=True)),
                ('min_interval', models.FloatField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('streetname', models.CharField(blank=True, max_length=100)),
                ('streetnumber', models.SmallIntegerField(blank=True, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('town', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('address_notice', models.TextField(blank=True)),
                ('broad_location', models.TextField(blank=True)),
                ('distance', models.FloatField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('website', models.TextField(blank=True)),
                ('telephone', models.BigIntegerField(blank=True, null=True)),
                ('structure', models.TextField(blank=True)),
                ('focus', models.TextField(blank=True)),
                ('processing', models.TextField(blank=True)),
                ('distribution', models.TextField(blank=True)),
                ('animals', models.TextField(blank=True)),
                ('official', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SupplierRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', core.fields.PercentField()),
                ('importance', core.fields.PercentField(default=100)),
                ('reason', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('official', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.QualityFeature')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Supplier')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('entry_date', models.DateField(auto_now_add=True)),
                ('amount', models.FloatField()),
                ('comment', models.TextField(blank=True)),
                ('value', models.FloatField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_entry_type', models.BooleanField()),
                ('to_balance', models.BooleanField()),
                ('no', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('abbr', models.CharField(max_length=100)),
                ('plural', models.CharField(blank=True, default='', max_length=100)),
                ('contents', models.CharField(blank=True, default='', max_length=100)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('continuous', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('comment', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='VAT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=4)),
                ('name', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='BatchTransaction',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='Consumable',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Item')),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('orderpos', models.IntegerField(blank=True, null=True)),
                ('presumed_price', models.FloatField(blank=True, null=True)),
                ('estimated_consumption', models.FloatField(default=0)),
                ('monthly_consumption', models.FloatField(default=0)),
                ('taken', models.FloatField(default=0)),
                ('stock', models.FloatField(default=0)),
                ('on_order', models.FloatField(default=0)),
                ('planning', models.FloatField(default=0)),
            ],
            bases=('core.item',),
        ),
        migrations.CreateModel(
            name='ContainerCategory',
            fields=[
                ('itemcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.ItemCategory')),
            ],
            bases=('core.itemcategory',),
        ),
        migrations.CreateModel(
            name='CostSharing',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('approval_comment', models.TextField(blank=True)),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='Depositation',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('confirmation_comment', models.TextField(blank=True)),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('approval_comment', models.TextField(blank=True)),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='Durable',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Item')),
            ],
            bases=('core.item',),
        ),
        migrations.CreateModel(
            name='Inpayment',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('confirmation_comment', models.TextField(blank=True)),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='PayOutBalance',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Currency')),
                ('money_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MoneyBox')),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='PayOutDeposit',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Currency')),
                ('money_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MoneyBox')),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.User')),
                ('last_name', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('streetname', models.CharField(blank=True, max_length=100)),
                ('streetnumber', models.SmallIntegerField(blank=True, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('town', models.CharField(blank=True, max_length=100)),
                ('address_notice', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('website', models.TextField(blank=True)),
                ('telephone', models.BigIntegerField(blank=True, null=True)),
            ],
            bases=('core.user',),
        ),
        migrations.CreateModel(
            name='ProceedsSharing',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('approval_comment', models.TextField(blank=True)),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('itemcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.ItemCategory')),
            ],
            bases=('core.itemcategory',),
        ),
        migrations.CreateModel(
            name='Recovery',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
                ('approval_comment', models.TextField(blank=True)),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('transaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Transaction')),
            ],
            bases=('core.transaction',),
        ),
        migrations.CreateModel(
            name='VirtualUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.User')),
                ('description', models.TextField(blank=True)),
            ],
            bases=('core.user',),
        ),
        migrations.AddField(
            model_name='user',
            name='accounts',
            field=models.ManyToManyField(blank=True, to='core.Account'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='entered_by_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='originator_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='originator_account', to='core.Account'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.TransactionStatus'),
        ),
        migrations.AddField(
            model_name='transaction',
            name='transaction_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.TransactionType'),
        ),
        migrations.AddField(
            model_name='qualityfeature',
            name='function',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.QualityFunction'),
        ),
        migrations.AddField(
            model_name='offerrating',
            name='feature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.QualityFeature'),
        ),
        migrations.AddField(
            model_name='offerrating',
            name='offer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Offer'),
        ),
        migrations.AddField(
            model_name='insertion',
            name='entered_by_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='insertion',
            name='payer_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payer_account', to='core.Account'),
        ),
        migrations.AddField(
            model_name='insertion',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.TransactionStatus'),
        ),
        migrations.AddField(
            model_name='insertion',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Supplier'),
        ),
        migrations.AddField(
            model_name='generaloffer',
            name='distributor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distributor', to='core.Supplier'),
        ),
        migrations.AddField(
            model_name='generaloffer',
            name='grower',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grower', to='core.Supplier'),
        ),
        migrations.AddField(
            model_name='generaloffer',
            name='processor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processor', to='core.Supplier'),
        ),
        migrations.AddField(
            model_name='generaloffer',
            name='vat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VAT', to='core.VAT'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Role'),
        ),
        migrations.AddField(
            model_name='charge',
            name='transaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Transaction'),
        ),
        migrations.AddField(
            model_name='batchstorage',
            name='position',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.StorageSpace'),
        ),
        migrations.AddField(
            model_name='batch',
            name='supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Supplier'),
        ),
        migrations.AddField(
            model_name='batch',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Unit'),
        ),
        migrations.AddField(
            model_name='account',
            name='users',
            field=models.ManyToManyField(blank=True, to='core.User'),
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('consumable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Consumable')),
                ('loanable', models.BooleanField()),
                ('buyable', models.BooleanField()),
                ('capacity', models.FloatField()),
                ('circular', models.BooleanField()),
                ('foodsave', core.fields.PercentField()),
                ('cleanness', core.fields.PercentField()),
                ('smelliness', core.fields.PercentField()),
                ('cleanability', core.fields.PercentField()),
                ('reachability', core.fields.PercentField()),
                ('resistance_smell', core.fields.PercentField()),
                ('resistance_light', core.fields.PercentField()),
                ('resistance_humidity', core.fields.PercentField()),
                ('capability_oil', core.fields.PercentField()),
                ('capability_liquid', core.fields.PercentField()),
                ('ventilation', core.fields.PercentField()),
                ('rodentfree', models.NullBooleanField()),
                ('mothfree', models.NullBooleanField()),
                ('width', models.FloatField()),
                ('depth', models.FloatField()),
                ('height', models.FloatField()),
                ('amount_occupied', models.PositiveSmallIntegerField()),
                ('amount_ready', models.PositiveSmallIntegerField()),
                ('amount_unclean', models.PositiveSmallIntegerField()),
                ('amount_defective', models.PositiveSmallIntegerField()),
                ('amount_loaned', models.PositiveSmallIntegerField()),
                ('amount_new', models.PositiveSmallIntegerField()),
                ('volume_max', models.FloatField()),
                ('volume_easy', models.FloatField()),
                ('tare', models.FloatField()),
                ('tare_without_lid', models.FloatField()),
                ('tare3', models.FloatField()),
                ('tare3_name', models.CharField(max_length=50)),
                ('tare4', models.FloatField()),
                ('tare4_name', models.CharField(max_length=50)),
                ('tare5', models.FloatField()),
                ('tare5_name', models.CharField(max_length=50)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ContainerCategory')),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Material')),
            ],
            bases=('core.consumable',),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('durable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Durable')),
                ('active', models.BooleanField(default=True)),
            ],
            bases=('core.durable',),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('consumable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Consumable')),
                ('density', models.FloatField(blank=True, null=True)),
                ('storability', models.DurationField(blank=True, null=True)),
                ('usual_taking_min', models.FloatField(blank=True, null=True)),
                ('usual_taking_max', models.FloatField(blank=True, null=True)),
                ('storage_temperature_min', models.FloatField(blank=True, null=True)),
                ('storage_temperature_optimal', models.FloatField(blank=True, null=True)),
                ('storage_temperature_max', models.FloatField(blank=True, null=True)),
                ('storage_humidity_min', core.fields.PercentField(blank=True, null=True)),
                ('storage_humidity_optimal', core.fields.PercentField(blank=True, null=True)),
                ('storage_humidity_max', core.fields.PercentField(blank=True, null=True)),
                ('storage_reachability_min', core.fields.PercentField(blank=True, null=True)),
                ('storage_smelliness_max', core.fields.PercentField(blank=True, null=True)),
                ('storage_height_min', models.FloatField(blank=True, null=True)),
                ('storage_height_optimal', models.FloatField(blank=True, null=True)),
                ('storage_height_max', models.FloatField(blank=True, null=True)),
                ('storage_brightness_min', core.fields.PercentField(blank=True, null=True)),
                ('storage_brightness_max', core.fields.PercentField(blank=True, null=True)),
                ('storage_ventilation_min', core.fields.PercentField(blank=True, null=True)),
                ('storage_ventilation_max', core.fields.PercentField(blank=True, null=True)),
                ('storage_mothfree_needed', models.NullBooleanField()),
                ('storage_micefree_needed', models.NullBooleanField()),
                ('lossfactor', core.fields.PercentField(default=0)),
                ('official', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ProductCategory')),
            ],
            bases=('core.consumable',),
        ),
        migrations.CreateModel(
            name='Restitution',
            fields=[
                ('batchtransaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.BatchTransaction')),
                ('approval_comment', models.TextField(blank=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User')),
            ],
            bases=('core.batchtransaction',),
        ),
        migrations.CreateModel(
            name='Taking',
            fields=[
                ('batchtransaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.BatchTransaction')),
            ],
            bases=('core.batchtransaction',),
        ),
        migrations.AddField(
            model_name='transfer',
            name='batch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Batch'),
        ),
        migrations.AddField(
            model_name='transfer',
            name='currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Currency'),
        ),
        migrations.AddField(
            model_name='transfer',
            name='recipient_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Account'),
        ),
        migrations.AddField(
            model_name='supplier',
            name='contact_person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Person'),
        ),
        migrations.AddField(
            model_name='recovery',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='recovery',
            name='participating_accounts',
            field=models.ManyToManyField(to='core.Account'),
        ),
        migrations.AddField(
            model_name='proceedssharing',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='proceedssharing',
            name='participating_accounts',
            field=models.ManyToManyField(to='core.Account'),
        ),
        migrations.AddField(
            model_name='inpayment',
            name='confirmed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='inpayment',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Currency'),
        ),
        migrations.AddField(
            model_name='inpayment',
            name='money_box',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MoneyBox'),
        ),
        migrations.AddField(
            model_name='generaloffer',
            name='consumable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consumable', to='core.Consumable'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Person'),
        ),
        migrations.AddField(
            model_name='donation',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='donation',
            name='participating_accounts',
            field=models.ManyToManyField(to='core.Account'),
        ),
        migrations.AddField(
            model_name='depositation',
            name='confirmed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='depositation',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Currency'),
        ),
        migrations.AddField(
            model_name='depositation',
            name='money_box',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.MoneyBox'),
        ),
        migrations.AddField(
            model_name='costsharing',
            name='approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.User'),
        ),
        migrations.AddField(
            model_name='costsharing',
            name='participating_accounts',
            field=models.ManyToManyField(to='core.Account'),
        ),
        migrations.AddField(
            model_name='consumptionestimation',
            name='consumable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Consumable'),
        ),
        migrations.AddField(
            model_name='consumable',
            name='presumed_vat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.VAT'),
        ),
        migrations.AddField(
            model_name='consumable',
            name='unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Unit'),
        ),
        migrations.AddField(
            model_name='batchtransaction',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Batch'),
        ),
        migrations.AddField(
            model_name='batch',
            name='consumable',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Consumable'),
        ),
        migrations.CreateModel(
            name='DeviceByInstalments',
            fields=[
                ('device_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Device')),
                ('interval_months', models.FloatField(default=1)),
                ('interval_days', models.FloatField(default=0)),
                ('number_of_instalments', models.IntegerField(blank=True, null=True)),
                ('deducted', models.FloatField(default=0)),
            ],
            bases=('core.device',),
        ),
        migrations.AddField(
            model_name='restitution',
            name='original_taking',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Taking'),
        ),
        migrations.AddField(
            model_name='device',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.DeviceCategory'),
        ),
        migrations.AddField(
            model_name='device',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.DeviceStatus'),
        ),
        migrations.AddField(
            model_name='instalment',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.DeviceByInstalments'),
        ),
    ]
